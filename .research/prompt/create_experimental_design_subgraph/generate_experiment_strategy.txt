
Input:
You are a cutting-edge AI researcher. Based on the new research method described in # New Methods, please design an overall experimental strategy that will be applied across all experiments to demonstrate the effectiveness of this method.

# Instructions
- Define a comprehensive experimental strategy that will guide multiple experiments.
- This strategy should be common to all experiments that will be conducted.
- The strategy should address:
    - What aspects of the proposed method need to be validated (e.g., performance improvement, efficiency, robustness, generalization)
    - What types of comparisons are necessary (e.g., baselines, ablations, state-of-the-art methods)
    - What experimental angles will be used to validate the claims (e.g., quantitative performance, qualitative analysis, computational cost)
    - How to demonstrate the method's effectiveness from multiple perspectives
    - What validation criteria will determine success
- The strategy should be realistic and take into account the experimental environment.
- Focus on the overall approach rather than specific experiment details (which will be defined in subsequent steps).

## Output Format
Please provide:
- experiment_strategy: A comprehensive strategy statement that describes the overall approach for validating the proposed method across all experiments

# Experimental Environment
NVIDIA Tesla T4
VRAM：16 GB
RAM：500 MB

# Current Research Method (Target for Experiment Design)
{
    "Open Problems": "Current progressive multi-fidelity schedulers such as PASHA decide when to raise the maximum training budget by monitoring whether the ranking of the two top rungs has stabilised.  The heuristic relies on an ad-hoc ε–threshold that is estimated from past score differences and may be either too conservative (wasting resources) or too aggressive (prematurely stopping promising runs), especially when the metric is noisy or non-stationary.",
    "Methods": "Surrogate-Assisted PASHA (SA-PASHA)\n1. Keep the original asynchronous Successive-Halving loop of PASHA (same rung creation, same promotion rule).\n2. Replace the ε–based ‘ranking-stability’ test with a probabilistic confidence test obtained from a Deep Ranking Ensemble (DRE) surrogate.\n   2.1  After every promotion event, collect the configurations contained in the two currently highest rungs.\n   2.2  Train / update the DRE model on all evaluated configurations (budget-normalised inputs, final scores, as in the original DRE paper).\n   2.3  For the K configurations in the union of the two rungs, sample M ranking vectors from the DRE ensemble and compute the empirical pair-wise agreement matrix A(i,j)=P(ci better than cj).\n   2.4  Compute the average rank-confidence ρ =  (1/K) Σ_i ( |{ j : A(i,j)>0.5 }| / (K−1) ).  ρ≈1 indicates a very stable ranking.\n3. Decision rule: keep the current maximum budget T_max as long as ρ ≥ τ (τ=0.9 by default); otherwise double T_max exactly as in PASHA.  No hand-crafted ε is required.\n4. All other PASHA components (soft vs. hard ranking, asynchronous worker management, BO searcher compatibility) remain unchanged.",
    "Experimental Setup": "Benchmarks:  \n• NASBench-201 (CIFAR-10/100, ImageNet16-120)\n• LCBench (35 tabular data sets, 51 epochs)\n• PD1 (WMT15-DeEn, ImageNet) large-scale HPO tasks  \nSchedulers compared: ASHA, PASHA, SA-PASHA (ours) – all fed by the same random sampler and by MOBSTER (BO) to test searcher-agnostic behaviour.  \nResources: 4 parallel GPUs (NASBench), 4 CPU workers (LCBench/PD1).  Hyper-parameters: τ∈{0.8,0.9,0.95}; DRE ensemble size=10, list-wise loss, 100 meta-epochs per update.  5 random seeds.",
    "Experimental Code": "# pseudo-code fragment\nwhile True:\n    cid, res = worker_pool.wait_next_result()\n    pasha_state.update(cid, res)\n    if pasha_state.promotion_event():\n        top, prev = pasha_state.top_two_rungs()\n        X, y = pasha_state.all_evaluations()\n        dre.fit(X, y)                      # incremental update\n        ranks = dre.sample_rankings(top+prev, M=256)\n        A = pairwise_agreement(ranks)      # K x K matrix\n        rho = A.mean(dim=1).mean()\n        if rho < tau:\n            pasha_state.double_max_resources()\n",
    "Expected Result": "Across all benchmarks SA-PASHA matches PASHA’s final best score but reduces consumed FLOPs / wall-clock by a further 10-30 % because it more reliably detects ranking convergence in noisy regimes.  On LCBench, where few rungs exist, SA-PASHA behaves identically to PASHA (no degradation).  Surrogate update time adds <3 % overhead.",
    "Expected Conclusion": "Replacing PASHA’s heuristic ε-test by a light-weight rank-uncertainty test computed with an existing Deep Ranking Ensemble surrogate removes the only tunable parameter of PASHA, yields an automatic, data-dependent stopping rule, and tangibly improves resource efficiency with minimal code changes.  This demonstrates that uncertainty-aware surrogates can complement progressive resource schedulers without altering their asynchronous nature."
}

---


# Reference Information from Previous Iteration

Output:
{
    "experiment_strategy": "Objective:\nBuild a single, coherent evaluation pipeline that can be reused on every benchmark to show that SA-PASHA is (1) at least as good as PASHA in terms of final solution quality, (2) clearly more resource-efficient, (3) robust to noise, searcher choice and hyper-parameters, and (4) free of the hand-crafted ε weakness.\n\n1. Validation Aspects\n   A. Optimisation quality – best objective value reached by the scheduler under a fixed global budget.\n   B. Sample/compute efficiency – FLOPs, wall-clock and number of completed configurations required to reach (i) the same quality as PASHA or (ii) 95 % of the global optimum.\n   C. Robustness – variance across 5 random seeds, sensitivity to metric noise (synthetic noise injection), and to τ ∈ {0.8,0.9,0.95}.\n   D. Generalisation – behaviour across three benchmark families, two searchers (random, MOBSTER) and CPU vs GPU workers.\n   E. Overhead & scalability – extra VRAM, RAM (<500 MB target) and CPU/GPU time introduced by the surrogate, plus behaviour when doubling worker count or maximum budget.\n\n2. Necessary Comparisons\n   1. Baselines: ASHA (classical) and PASHA (ε-heuristic).\n   2. Ablations:  \n      • SA-PASHA-noDRE (replace surrogate by uniform noise – isolates usefulness of confidence estimate)  \n      • SA-PASHA-fixBudget (never doubles budget – isolates scheduling decisions)  \n      • SA-PASHA-smallEns (ensemble size = 3) – checks memory/overhead trade-off.\n   3. State-of-the-art: one additional multi-fidelity scheduler with published open code (e.g. HYBAND or DEHB) to demonstrate competitiveness beyond PASHA.\n\n3. Experimental Angles\n   • Quantitative curves: (a) best-seen objective vs wall-clock, (b) regret vs consumed FLOPs, (c) rank-confidence ρ trajectory vs time.\n   • Tabular summaries: final score, area-under-curve (AUC), time-to-X metrics, mean ± sd over seeds.\n   • Qualitative: violin plots of ρ, heatmaps of pairwise agreement matrices, case-study traces where ε misfires but ρ succeeds.\n   • Cost profiling: stacked bar showing % time on training, surrogate fitting, bookkeeping.\n\n4. Multi-Perspective Demonstrations\n   Perspective 1 ‑ Efficiency: show statistically significant (paired t-test, p<0.05) reduction of ≥10 % in FLOPs/wall-clock for equal quality.\n   Perspective 2 ‑ Quality: show no significant loss (>1 % relative) in best test accuracy/perplexity at end of fixed budget.\n   Perspective 3 ‑ Robustness: show coefficient of variation across seeds not worse than PASHA; performance drop under added noise ≤2 % absolute, whereas PASHA degrades >2 %.\n   Perspective 4 ‑ Practicality: show surrogate memory footprint <150 MB and extra compute <3 % of total, satisfying Tesla T4 (16 GB VRAM, 500 MB RAM) constraints.\n\n5. Success Criteria (Pass/Fail)\n   • Efficiency Gain: median 10 % or more compute saving on ≥70 % of benchmark/searcher pairs.\n   • Quality Parity: Δ(best score) ∈ [-1 %, +1 %] of PASHA on all tasks.\n   • Robustness: standard deviation across seeds ≤ PASHA’s standard deviation on ≥80 % of tasks.\n   • Overhead: surrogate adds <5 % extra wall-clock and fits within memory budget.\n   Meeting all four constitutes success.\n\n6. Execution Protocol (common to all experiments)\n   a. Fix a global wall-clock/FLOP budget per benchmark that saturates PASHA.\n   b. Run every scheduler/ablation for 5 seeds, capture full event logs.\n   c. Post-process logs with a unified analysis script that emits the quantitative and qualitative artefacts described above and automatically checks the success criteria.\n   d. Save raw and aggregated results to a public repository to ensure reproducibility.\n\n7. Practical Constraints & Mitigations\n   • Tesla T4 VRAM: cap per-model batch sizes; ensure DRE uses half-precision; off-load numpy buffers to CPU.\n   • 500 MB RAM: stream log files to disk and keep only last N events in memory; restrict ensemble size and feature dimensionality.\n   • Parallelism: limit to 4 GPU or 4 CPU workers as in spec; use asynchronous torch dataloaders to overlap compute.\n\nThis unified experimental strategy guarantees that each subsequent experiment tests SA-PASHA on the same axes, with the same baselines, and against clear, measurable success thresholds, providing a holistic demonstration of the method’s effectiveness."
}
